function atoi {
#Returns the integer representation of an IP arg, passed in ascii dotted-decimal notation (x.x.x.x)
IP=$1; IPNUM=0
for (( i=0 ; i<4 ; ++i )); do
((IPNUM+=${IP%%.*}*$((256**$((3-${i}))))))
IP=${IP#*.}
done
echo $IPNUM
}
function itoa {
#returns the dotted-decimal ascii form of an IP arg passed in integer format
echo -n $(($(($(($((${1}/256))/256))/256))%256)).
echo -n $(($(($((${1}/256))/256))%256)).
echo -n $(($((${1}/256))%256)).
echo $((${1}%256))
}
# ansible galaxy collection update
function agu {
command -v ansible &> /dev/null && rm -rf $(pip show ansible | grep Location | cut -d ' ' -f 2)/ansible_collections 
command -v ansible-galaxy &> /dev/null && ansible-galaxy collection install $(ansible-galaxy collection list | cut -d ' ' -f 1 -s | cut -d '.' -f 1,2 -s) --upgrade --ignore-errors
}

function terraform() { 
    echo "+ terraform $@"; command terraform $@; 
    }

# set a variable for your FIRMWARE_PATH in ~/.zshenv or ~/.zshrc
# echo 'export FIRMWARE_PATH="your path"' >> ~/.zshenv

function starthttp {
# Serve a folder over HTTP
# since macOS Monterey no sudo required for a port binding <=1023
origin=$PWD
cd $FIRMWARE_PATH && nohup python3 -m http.server 80 > /dev/null 2>&1 &
cd $origin
unset PWD
}
function stophttp {
# Stop serving a folder over HTTP
kill `ps ax | grep 'Python \-m http.server' | cut -d" " -f1`

}
function starttftp {
# Serve a folder over TFTP
# since macOS Monterey no sudo required for a port binding <=1023
# install: pip3 install py3tftp
origin=$PWD
cd $FIRMWARE_PATH && nohup py3tftp -p 69 > /dev/null 2>&1 &
cd $origin
unset PWD
}
function stoptftp {
#Stop serving a folder over TFTP
kill `ps ax | grep 'py3tftp \-p' | cut -d " " -f1`
}
# pip zsh completion start
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] 2>/dev/null ))
}
if [ -n "$ZSH_VERSION" ]; then
    compctl -K _pip_completion pip3
fi
# pip zsh completion end

# macOS functions for fleet managed device with JamF Pro
# verify if local user is Admin, otherwise start Self Service APP to manually gain temporary local Admin
function amilocaladmin() {
    localsys="$(uname)";
    [ -e /usr/sbin/dseditgroup ] && checkadmin="$(dseditgroup -o checkmember admin)";
    if [[ $localsys == "Darwin" && $checkadmin == *"yes"* ]]; 
    then
        echo "You are already an Localadmin";
        "$@";
    elif [ -d /Applications/Self\ Service.app ];
    then
        echo "not an Admin, Starting Self Service APP";
        /usr/bin/open "/Applications/Self Service.app";
    else
        echo "command not required"
    fi
    unset localsys
}
# homebrew update on macOS including brew cu
# https://github.com/buo/homebrew-cask-upgrade
#
function bug {
    localsys="$(uname)"
    if [[ $localsys == "Darwin" ]];
    then
        echo "executing brew upgrade";
        amilocaladmin brew update && brew cu -f;
        printf 'Press any key to continue...';read ans
        brew upgrade && brew cu -a -f -y;
        brew cleanup;
    else
        echo "you are not on macOS"
    fi
    unset localsys
}
